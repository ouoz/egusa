/**
 * @file test_REPPnP.cpp
 * @brief Testing of REPPnP function and the internal helper functions.
 * @author Pascal Enderli
 * @date 10.10.2018
 * @details
 * @n
 * @n //Install cmake:
 * @n sudo apt-get install cmake
 * @n
 * @n Install Google Test:
 * @n sudo apt-get install libgtest-dev
 * @n cd /usr/src/gtest
 * @n sudo mkdir build
 * @n cd build
 * @n sudo cmake ..
 * @n sudo make
 * @n sudo ln -s *.a /usr/lib
 * @n
 * @n //Install Google Mock (not nessesary for REPPnP):
 * @n sudo apt-get install google-mock
 * @n cd /usr/src/gmock
 * @n sudo mkdir build
 * @n cd build
 * @n sudo cmake ..
 * @n sudo make
 * @n sudo ln -s *.a /usr/lib
 * @n
 * @n
 * @n //Native GTest:
 * @n
 * @n ASSERT_TRUE(condition); 	     EXPECT_TRUE(condition); 	     condition is true
 * @n ASSERT_FALSE(condition); 	     EXPECT_FALSE(condition); 	   condition is false
 * @n
 * @n ASSERT_EQ(val1, val2);       	 EXPECT_EQ(val1, val2);  	      val1 == val2
 * @n ASSERT_NE(val1, val2);       	 EXPECT_NE(val1, val2);  	      val1 != val2
 * @n ASSERT_LT(val1, val2);       	 EXPECT_LT(val1, val2);  	      val1 < val2
 * @n ASSERT_LE(val1, val2);       	 EXPECT_LE(val1, val2);  	      val1 <= val2
 * @n ASSERT_GT(val1, val2);       	 EXPECT_GT(val1, val2);  	      val1 > val2
 * @n ASSERT_GE(val1, val2);       	 EXPECT_GE(val1, val2);  	      val1 >= val2
 * @n
 * @n ASSERT_STREQ(str1, str2); 	   EXPECT_STREQ(str1, str2); 	    the two C strings have the same content
 * @n ASSERT_STRNE(str1, str2); 	   EXPECT_STRNE(str1, str2);    	the two C strings have different contents
 * @n ASSERT_STRCASEEQ(str1, str2);  EXPECT_STRCASEEQ(str1, str2); 	the two C strings have the same content, ignoring case
 * @n ASSERT_STRCASENE(str1, str2);  EXPECT_STRCASENE(str1, str2); 	the two C strings have different contents, ignoring case
 * @n
 * @n ASSERT_FLOAT_EQ(val1, val2); 	       EXPECT_FLOAT_EQ(val1,val2); 	        the two float values are almost equal
 * @n ASSERT_DOUBLE_EQ(val1, val2); 	     EXPECT_DOUBLE_EQ(val1, val2); 	      the two double values are almost equal
 * @n ASSERT_NEAR(val1, val2, abs_error);  EXPECT_NEAR(val1, val2, abs_error);  the difference between val1 and val2 doesn't exceed the given absolute error
 * @n
 * @n
 * @n //From eigen-checks.h (by ASL, ETHZ):
 * @n
 * @n EXPECT_TRUE(EIGEN_MATRIX_EQUAL(MatrixA, MatrixB))
 * @n Succeeds if two matrices are binary equal.
 * @n
 * @n EXPECT_TRUE(EIGEN_MATRIX_EQUAL_DOUBLE(MatrixA, MatrixB))
 * @n Succeeds if two matrices are equal to floating-point precision
 * @n
 * @n EXPECT_TRUE(EIGEN_MATRIX_NEAR(MatrixA, MatrixB, Precision))
 * @n Succeeds if two matrices are equal to a user-specified precision.
 * @n
 * @n EXPECT_TRUE(EIGEN_MATRIX_ZERO(MatrixA, Precision))
 * @n Succeeds if a matrix is equal to zero to a user-specified precision.
 * @n
 * @n ASSERT_TRUE(EIGEN_MATRIX_EQUAL(MatrixA, MatrixB));
 * @n ASSERT_FALSE(EIGEN_MATRIX_EQUAL(MatrixA, MatrixB));
 *
*/

#include <eigen-checks/gtest.h>
#include <gtest/gtest.h>
#include "reppnp.h"

using namespace REPPnP::internal;

const size_t n_matches = 10;

REPPnP::ControlPointBase c_w((REPPnP::ControlPointBase()
  << 1, 0, 0, 0,
     0, 1, 0, 0,
     0, 0, 1, 0).finished());

TEST(REPPnP, ComputeAlphas)
{
  Eigen::Matrix<double, 3, n_matches> w_P;
  w_P <<
  -1.08473658, -0.8477473, 0.65020337, 0.14815555, 0.19681862, 1.28232431, -0.73855413, -0.54262945, 0.13324297, 0.80292263,
   1.00421351, 0.2392437, -1.32358932, 0.98749325, -0.68782341, -0.83300284, -0.53772705, -0.20982159, 0.41702159, 0.94399215,
   0.96501575, 1.46333815, -2.26332019, 0.13270247, -0.01396254, -0.91219759, -1.68968785, 0.7485601, 0.29998586, 1.26956584;

  Eigen::Matrix<double, 10, 4> expected_alphas;
  expected_alphas <<
  -1.08473658,  1.00421351,  0.96501575,  0.11550732,
  -0.8477473 ,  0.2392437 ,  1.46333815,  0.14516545,
   0.65020337, -1.32358932, -2.26332019,  3.93670614,
   0.14815555,  0.98749325,  0.13270247, -0.26835127,
   0.19681862, -0.68782341, -0.01396254,  1.50496733,
   1.28232431, -0.83300284, -0.91219759,  1.46287612,
  -0.73855413, -0.53772705, -1.68968785,  3.96596903,
  -0.54262945, -0.20982159,  0.7485601 ,  1.00389094,
   0.13324297,  0.41702159,  0.29998586,  0.14974958,
   0.80292263,  0.94399215,  1.26956584, -2.01648062;

  alphas_t alphas_test = ComputeAlphas(w_P, c_w);
  EXPECT_TRUE(EIGEN_MATRIX_EQUAL_DOUBLE(expected_alphas, alphas_test));
}


TEST(REPPnP, ComputeM)
{
  Eigen::Matrix<double, 2, n_matches> i_P;
  i_P <<
  -0.26619788, -0.3222123, 0.13031939, 0.02281794, -0.0761249, 0.09909771, 0.00937447, -0.21278225, -0.04219054, -0.03552909,
   0.07660785, 0.13058671, -0.22251678, 0.08931175, -0.01379804, -0.02153978, -0.30059713, 0.03289634, 0.07188638, 0.31427125;

  Eigen::Matrix<double, 3, n_matches> w_P;
  w_P<<
  -1.08473658, -0.8477473, 0.65020337, 0.14815555, 0.19681862, 1.28232431, -0.73855413, -0.54262945, 0.13324297, 0.80292263,
   1.00421351, 0.2392437, -1.32358932, 0.98749325, -0.68782341, -0.83300284, -0.53772705, -0.20982159, 0.41702159, 0.94399215,
   0.96501575, 1.46333815, -2.26332019, 0.13270247, -0.01396254, -0.91219759, -1.68968785, 0.7485601, 0.29998586, 1.26956584;

  Eigen::Matrix<double, 20, 12> expected_M;
  expected_M <<
  -1.08473658e+00, -0.00000000e+00, -2.88754578e-01, 1.00421351e+00,  0.00000000e+00,  2.67319507e-01, 9.65015750e-01,  0.00000000e+00,  2.56885147e-01, 1.15507320e-01,  0.00000000e+00,  3.07478037e-02,
  -0.00000000e+00, -1.08473658e+00,  8.30993372e-02, 0.00000000e+00,  1.00421351e+00, -7.69306379e-02, 0.00000000e+00,  9.65015750e-01, -7.39277818e-02, 0.00000000e+00,  1.15507320e-01, -8.84876744e-03,
  -8.47747300e-01, -0.00000000e+00, -2.73154607e-01, 2.39243700e-01,  0.00000000e+00,  7.70872628e-02, 1.46333815e+00,  0.00000000e+00,  4.71505551e-01, 1.45165450e-01,  0.00000000e+00,  4.67740935e-02,
  -0.00000000e+00, -8.47747300e-01,  1.10704531e-01, 0.00000000e+00,  2.39243700e-01, -3.12420477e-02, 0.00000000e+00,  1.46333815e+00, -1.91092515e-01, 0.00000000e+00,  1.45165450e-01, -1.89566785e-02,
   6.50203370e-01,  0.00000000e+00, -8.47341066e-02, -1.32358932e+00, -0.00000000e+00,  1.72489353e-01, -2.26332019e+00, -0.00000000e+00,  2.94954507e-01, 3.93670614e+00,  0.00000000e+00, -5.13029143e-01,
   0.00000000e+00,  6.50203370e-01,  1.44681160e-01, -0.00000000e+00, -1.32358932e+00, -2.94520834e-01, -0.00000000e+00, -2.26332019e+00, -5.03626721e-01, 0.00000000e+00,  3.93670614e+00,  8.75983174e-01,
   1.48155550e-01,  0.00000000e+00, -3.38060445e-03, 9.87493250e-01,  0.00000000e+00, -2.25325617e-02, 1.32702470e-01,  0.00000000e+00, -3.02799700e-03, -2.68351270e-01, -0.00000000e+00,  6.12322318e-03,
   0.00000000e+00,  1.48155550e-01, -1.32320314e-02, 0.00000000e+00,  9.87493250e-01, -8.81947503e-02, 0.00000000e+00,  1.32702470e-01, -1.18518898e-02, -0.00000000e+00, -2.68351270e-01,  2.39669215e-02,
   1.96818620e-01,  0.00000000e+00,  1.49827978e-02, -6.87823410e-01, -0.00000000e+00, -5.23604883e-02, -1.39625400e-02, -0.00000000e+00, -1.06289696e-03, 1.50496733e+00,  0.00000000e+00,  1.14565487e-01,
   0.00000000e+00,  1.96818620e-01,  2.71571119e-03, -0.00000000e+00, -6.87823410e-01, -9.49061492e-03, -0.00000000e+00, -1.39625400e-02, -1.92655685e-04, 0.00000000e+00,  1.50496733e+00,  2.07655994e-02,
   1.28232431e+00,  0.00000000e+00, -1.27075403e-01, -8.33002840e-01, -0.00000000e+00,  8.25486739e-02, -9.12197590e-01, -0.00000000e+00,  9.03966922e-02, 1.46287612e+00,  0.00000000e+00, -1.44967674e-01,
   0.00000000e+00,  1.28232431e+00,  2.76209835e-02, -0.00000000e+00, -8.33002840e-01, -1.79426979e-02, -0.00000000e+00, -9.12197590e-01, -1.96485354e-02, 0.00000000e+00,  1.46287612e+00,  3.15100298e-02,
  -7.38554130e-01, -0.00000000e+00,  6.92355354e-03, -5.37727050e-01, -0.00000000e+00,  5.04090610e-03, -1.68968785e+00, -0.00000000e+00,  1.58399281e-02, 3.96596903e+00,  0.00000000e+00, -3.71788577e-02,
  -0.00000000e+00, -7.38554130e-01, -2.22007252e-01, -0.00000000e+00, -5.37727050e-01, -1.61639208e-01, -0.00000000e+00, -1.68968785e+00, -5.07915318e-01, 0.00000000e+00,  3.96596903e+00,  1.19215891e+00,
  -5.42629450e-01, -0.00000000e+00, -1.15461915e-01, -2.09821590e-01, -0.00000000e+00, -4.46463100e-02, 7.48560100e-01,  0.00000000e+00,  1.59280302e-01, 1.00389094e+00,  0.00000000e+00,  2.13610173e-01,
  -0.00000000e+00, -5.42629450e-01,  1.78505229e-02, -0.00000000e+00, -2.09821590e-01,  6.90236236e-03, 0.00000000e+00,  7.48560100e-01, -2.46248876e-02, 0.00000000e+00,  1.00389094e+00, -3.30243377e-02,
   1.33242970e-01,  0.00000000e+00,  5.62159286e-03, 4.17021590e-01,  0.00000000e+00,  1.75943661e-02, 2.99985860e-01,  0.00000000e+00,  1.26565654e-02, 1.49749580e-01,  0.00000000e+00,  6.31801564e-03,
   0.00000000e+00,  1.33242970e-01, -9.57835477e-03, 0.00000000e+00,  4.17021590e-01, -2.99781725e-02, 0.00000000e+00,  2.99985860e-01, -2.15648975e-02, 0.00000000e+00,  1.49749580e-01, -1.07649552e-02,
   8.02922630e-01,  0.00000000e+00,  2.85271104e-02, 9.43992150e-01,  0.00000000e+00,  3.35391821e-02, 1.26956584e+00,  0.00000000e+00,  4.51065190e-02, -2.01648062e+00, -0.00000000e+00, -7.16437214e-02,
   0.00000000e+00,  8.02922630e-01, -2.52335499e-01, 0.00000000e+00,  9.43992150e-01, -2.96669593e-01, 0.00000000e+00,  1.26956584e+00, -3.98988043e-01, -0.00000000e+00, -2.01648062e+00,  6.33721885e-01;

  M_t M_test = ComputeM(i_P, w_P, c_w);
  EXPECT_TRUE(EIGEN_MATRIX_NEAR(expected_M, M_test, 1e-7));
}


TEST(REPPnP, GetAlgebraicError)
{
  Eigen::Matrix<double, 20, 12> M;
  M <<
  -1.08473658e+00, -0.00000000e+00, -2.88754578e-01, 1.00421351e+00,  0.00000000e+00,  2.67319507e-01, 9.65015750e-01,  0.00000000e+00,  2.56885147e-01, 1.15507320e-01,  0.00000000e+00,  3.07478037e-02,
  -0.00000000e+00, -1.08473658e+00,  8.30993372e-02, 0.00000000e+00,  1.00421351e+00, -7.69306379e-02, 0.00000000e+00,  9.65015750e-01, -7.39277818e-02, 0.00000000e+00,  1.15507320e-01, -8.84876744e-03,
  -8.47747300e-01, -0.00000000e+00, -2.73154607e-01, 2.39243700e-01,  0.00000000e+00,  7.70872628e-02, 1.46333815e+00,  0.00000000e+00,  4.71505551e-01, 1.45165450e-01,  0.00000000e+00,  4.67740935e-02,
  -0.00000000e+00, -8.47747300e-01,  1.10704531e-01, 0.00000000e+00,  2.39243700e-01, -3.12420477e-02, 0.00000000e+00,  1.46333815e+00, -1.91092515e-01, 0.00000000e+00,  1.45165450e-01, -1.89566785e-02,
  6.50203370e-01,  0.00000000e+00, -8.47341066e-02, -1.32358932e+00, -0.00000000e+00,  1.72489353e-01, -2.26332019e+00, -0.00000000e+00,  2.94954507e-01, 3.93670614e+00,  0.00000000e+00, -5.13029143e-01,
  0.00000000e+00,  6.50203370e-01,  1.44681160e-01, -0.00000000e+00, -1.32358932e+00, -2.94520834e-01, -0.00000000e+00, -2.26332019e+00, -5.03626721e-01, 0.00000000e+00,  3.93670614e+00,  8.75983174e-01,
  1.48155550e-01,  0.00000000e+00, -3.38060445e-03, 9.87493250e-01,  0.00000000e+00, -2.25325617e-02, 1.32702470e-01,  0.00000000e+00, -3.02799700e-03, -2.68351270e-01, -0.00000000e+00,  6.12322318e-03,
  0.00000000e+00,  1.48155550e-01, -1.32320314e-02, 0.00000000e+00,  9.87493250e-01, -8.81947503e-02, 0.00000000e+00,  1.32702470e-01, -1.18518898e-02, -0.00000000e+00, -2.68351270e-01,  2.39669215e-02,
  1.96818620e-01,  0.00000000e+00,  1.49827978e-02, -6.87823410e-01, -0.00000000e+00, -5.23604883e-02, -1.39625400e-02, -0.00000000e+00, -1.06289696e-03, 1.50496733e+00,  0.00000000e+00,  1.14565487e-01,
  0.00000000e+00,  1.96818620e-01,  2.71571119e-03, -0.00000000e+00, -6.87823410e-01, -9.49061492e-03, -0.00000000e+00, -1.39625400e-02, -1.92655685e-04, 0.00000000e+00,  1.50496733e+00,  2.07655994e-02,
  1.28232431e+00,  0.00000000e+00, -1.27075403e-01, -8.33002840e-01, -0.00000000e+00,  8.25486739e-02, -9.12197590e-01, -0.00000000e+00,  9.03966922e-02, 1.46287612e+00,  0.00000000e+00, -1.44967674e-01,
  0.00000000e+00,  1.28232431e+00,  2.76209835e-02, -0.00000000e+00, -8.33002840e-01, -1.79426979e-02, -0.00000000e+00, -9.12197590e-01, -1.96485354e-02, 0.00000000e+00,  1.46287612e+00,  3.15100298e-02,
  -7.38554130e-01, -0.00000000e+00,  6.92355354e-03, -5.37727050e-01, -0.00000000e+00,  5.04090610e-03, -1.68968785e+00, -0.00000000e+00,  1.58399281e-02, 3.96596903e+00,  0.00000000e+00, -3.71788577e-02,
  -0.00000000e+00, -7.38554130e-01, -2.22007252e-01, -0.00000000e+00, -5.37727050e-01, -1.61639208e-01, -0.00000000e+00, -1.68968785e+00, -5.07915318e-01, 0.00000000e+00,  3.96596903e+00,  1.19215891e+00,
  -5.42629450e-01, -0.00000000e+00, -1.15461915e-01, -2.09821590e-01, -0.00000000e+00, -4.46463100e-02, 7.48560100e-01,  0.00000000e+00,  1.59280302e-01, 1.00389094e+00,  0.00000000e+00,  2.13610173e-01,
  -0.00000000e+00, -5.42629450e-01,  1.78505229e-02, -0.00000000e+00, -2.09821590e-01,  6.90236236e-03, 0.00000000e+00,  7.48560100e-01, -2.46248876e-02, 0.00000000e+00,  1.00389094e+00, -3.30243377e-02,
  1.33242970e-01,  0.00000000e+00,  5.62159286e-03, 4.17021590e-01,  0.00000000e+00,  1.75943661e-02, 2.99985860e-01,  0.00000000e+00,  1.26565654e-02, 1.49749580e-01,  0.00000000e+00,  6.31801564e-03,
  0.00000000e+00,  1.33242970e-01, -9.57835477e-03, 0.00000000e+00,  4.17021590e-01, -2.99781725e-02, 0.00000000e+00,  2.99985860e-01, -2.15648975e-02, 0.00000000e+00,  1.49749580e-01, -1.07649552e-02,
  8.02922630e-01,  0.00000000e+00,  2.85271104e-02, 9.43992150e-01,  0.00000000e+00,  3.35391821e-02, 1.26956584e+00,  0.00000000e+00,  4.51065190e-02, -2.01648062e+00, -0.00000000e+00, -7.16437214e-02,
  0.00000000e+00,  8.02922630e-01, -2.52335499e-01, 0.00000000e+00,  9.43992150e-01, -2.96669593e-01, 0.00000000e+00,  1.26956584e+00, -3.98988043e-01, -0.00000000e+00, -2.01648062e+00,  6.33721885e-01;

  Eigen::Matrix<double, 12, 12> V;
  V <<
   9.50243578e-03,  2.57528962e-02,  6.96406982e-01, -1.07912821e-01, -1.24495240e-01,  4.69218961e-01, 1.97267048e-01, -4.55122720e-01, -1.38407156e-01, -3.07894110e-02,  5.20850239e-03,  2.77578375e-02,
  -2.55153362e-02,  8.43293318e-03, -1.01282821e-01, -7.06496715e-01,  3.28702702e-01, -1.53842371e-01, 4.71174578e-01, -1.33138737e-01,  3.36077711e-01, 2.38619805e-02, -4.90744533e-02,  5.01175069e-02,
  -7.08623558e-03, -4.75574246e-03,  9.89969956e-02, -5.86537170e-03, -7.51022513e-02, -1.40354216e-01, -2.01907969e-02,  8.92230348e-02,  5.73827612e-02, -8.09094676e-01, -6.21023687e-02,  5.42771230e-01,
  -8.45002625e-02, -2.63934345e-01, -2.62069044e-01, 3.58683325e-02, -9.29905436e-02, -3.61318025e-01, -1.85645800e-01, -8.10303330e-01, -1.27109703e-01, -5.03615414e-02,  6.46058465e-02,  1.05244000e-02,
   2.56682875e-01, -8.61602947e-02,  3.44012687e-02, 2.86023833e-01,  4.85074445e-01,  2.63131113e-01, -3.12688642e-01, -1.99517278e-01,  6.28764022e-01, -3.99539092e-02, -6.43498199e-02,  2.23446518e-02,
   2.73421476e-02,  3.36584511e-03, -3.58675764e-02, -8.94525997e-03, -2.55763973e-01, -2.22366953e-03, -5.67058218e-02, -4.12966192e-02,  8.12567174e-02, 3.69819009e-01, -7.74322182e-01,  4.29639228e-01,
  -1.35789070e-01, -4.22020228e-01, -5.03876755e-01, 6.90545140e-02, -1.19351882e-01,  6.07140163e-01, 3.09920212e-01, -2.04055243e-03, -3.72586278e-02, -2.09229913e-01, -1.18312247e-01, -8.19636793e-02,
   4.14851634e-01, -1.37807288e-01,  7.60117676e-02, 5.08768740e-01,  3.04604436e-02, -2.94784947e-01, 6.67648820e-01, -2.81814589e-02,  3.44414346e-03, 7.33273811e-02,  1.91815572e-02,  6.44360894e-02,
   6.93337507e-02,  7.88542771e-04, -1.28740045e-01, -5.33954153e-02, -3.98079842e-01,  1.47928703e-01, -4.81169201e-03, -7.76169049e-04,  3.08504561e-01, 3.06798052e-01,  5.96786596e-01,  4.99938570e-01,
   2.60435195e-01,  8.09476647e-01, -3.70412126e-01, 5.78199265e-02, -4.00278541e-02,  1.86401957e-01, 9.57958014e-02, -2.49817712e-01, -9.17678829e-02, -1.32975662e-01, -3.99923036e-02, -2.71271289e-02,
  -7.99280258e-01,  2.64197668e-01,  5.74411153e-02, 3.60522760e-01,  1.51328196e-02, -7.45837122e-02, 2.28443866e-01, -7.63282062e-02,  3.05589926e-01, 2.92552956e-02, -5.39344943e-03, -1.63047687e-04,
  -1.53007613e-01,  1.18282674e-03, -8.40261264e-02, 7.88770767e-02,  6.21276066e-01,  1.37711579e-01, 5.13697748e-03, -6.22494226e-03, -4.98113486e-01, 2.02810797e-01,  1.16917810e-01,  5.05344122e-01;

  std::vector<double> algebraic_errors_test = GetAlgebraicErrors(M, V);
  double algebraic_errors_expected[] = {0.00091485, 0.00148377, 0.00102834, 0.00126117, 0.0019207, 0.00033924, 0.00019927, 0.00020619, 0.00109092, 0.00091234};

  for(int i=0; i<10; i++)
  {
    EXPECT_NEAR(algebraic_errors_test[i],algebraic_errors_expected[i], 1e-7);
  }
}


TEST(REPPnP, NullspaceEstimation)
{
  Eigen::Matrix<double, 20, 12> M;
  M <<
  -1.08473658e+00, -0.00000000e+00, -2.88754578e-01, 1.00421351e+00,  0.00000000e+00,  2.67319507e-01, 9.65015750e-01,  0.00000000e+00,  2.56885147e-01, 1.15507320e-01,  0.00000000e+00,  3.07478037e-02,
  -0.00000000e+00, -1.08473658e+00,  8.30993372e-02, 0.00000000e+00,  1.00421351e+00, -7.69306379e-02, 0.00000000e+00,  9.65015750e-01, -7.39277818e-02, 0.00000000e+00,  1.15507320e-01, -8.84876744e-03,
  -8.47747300e-01, -0.00000000e+00, -2.73154607e-01, 2.39243700e-01,  0.00000000e+00,  7.70872628e-02, 1.46333815e+00,  0.00000000e+00,  4.71505551e-01, 1.45165450e-01,  0.00000000e+00,  4.67740935e-02,
  -0.00000000e+00, -8.47747300e-01,  1.10704531e-01, 0.00000000e+00,  2.39243700e-01, -3.12420477e-02, 0.00000000e+00,  1.46333815e+00, -1.91092515e-01, 0.00000000e+00,  1.45165450e-01, -1.89566785e-02,
  6.50203370e-01,  0.00000000e+00, -8.47341066e-02, -1.32358932e+00, -0.00000000e+00,  1.72489353e-01, -2.26332019e+00, -0.00000000e+00,  2.94954507e-01, 3.93670614e+00,  0.00000000e+00, -5.13029143e-01,
  0.00000000e+00,  6.50203370e-01,  1.44681160e-01, -0.00000000e+00, -1.32358932e+00, -2.94520834e-01, -0.00000000e+00, -2.26332019e+00, -5.03626721e-01, 0.00000000e+00,  3.93670614e+00,  8.75983174e-01,
  1.48155550e-01,  0.00000000e+00, -3.38060445e-03, 9.87493250e-01,  0.00000000e+00, -2.25325617e-02, 1.32702470e-01,  0.00000000e+00, -3.02799700e-03, -2.68351270e-01, -0.00000000e+00,  6.12322318e-03,
  0.00000000e+00,  1.48155550e-01, -1.32320314e-02, 0.00000000e+00,  9.87493250e-01, -8.81947503e-02, 0.00000000e+00,  1.32702470e-01, -1.18518898e-02, -0.00000000e+00, -2.68351270e-01,  2.39669215e-02,
  1.96818620e-01,  0.00000000e+00,  1.49827978e-02, -6.87823410e-01, -0.00000000e+00, -5.23604883e-02, -1.39625400e-02, -0.00000000e+00, -1.06289696e-03, 1.50496733e+00,  0.00000000e+00,  1.14565487e-01,
  0.00000000e+00,  1.96818620e-01,  2.71571119e-03, -0.00000000e+00, -6.87823410e-01, -9.49061492e-03, -0.00000000e+00, -1.39625400e-02, -1.92655685e-04, 0.00000000e+00,  1.50496733e+00,  2.07655994e-02,
  1.28232431e+00,  0.00000000e+00, -1.27075403e-01, -8.33002840e-01, -0.00000000e+00,  8.25486739e-02, -9.12197590e-01, -0.00000000e+00,  9.03966922e-02, 1.46287612e+00,  0.00000000e+00, -1.44967674e-01,
  0.00000000e+00,  1.28232431e+00,  2.76209835e-02, -0.00000000e+00, -8.33002840e-01, -1.79426979e-02, -0.00000000e+00, -9.12197590e-01, -1.96485354e-02, 0.00000000e+00,  1.46287612e+00,  3.15100298e-02,
  -7.38554130e-01, -0.00000000e+00,  6.92355354e-03, -5.37727050e-01, -0.00000000e+00,  5.04090610e-03, -1.68968785e+00, -0.00000000e+00,  1.58399281e-02, 3.96596903e+00,  0.00000000e+00, -3.71788577e-02,
  -0.00000000e+00, -7.38554130e-01, -2.22007252e-01, -0.00000000e+00, -5.37727050e-01, -1.61639208e-01, -0.00000000e+00, -1.68968785e+00, -5.07915318e-01, 0.00000000e+00,  3.96596903e+00,  1.19215891e+00,
  -5.42629450e-01, -0.00000000e+00, -1.15461915e-01, -2.09821590e-01, -0.00000000e+00, -4.46463100e-02, 7.48560100e-01,  0.00000000e+00,  1.59280302e-01, 1.00389094e+00,  0.00000000e+00,  2.13610173e-01,
  -0.00000000e+00, -5.42629450e-01,  1.78505229e-02, -0.00000000e+00, -2.09821590e-01,  6.90236236e-03, 0.00000000e+00,  7.48560100e-01, -2.46248876e-02, 0.00000000e+00,  1.00389094e+00, -3.30243377e-02,
  1.33242970e-01,  0.00000000e+00,  5.62159286e-03, 4.17021590e-01,  0.00000000e+00,  1.75943661e-02, 2.99985860e-01,  0.00000000e+00,  1.26565654e-02, 1.49749580e-01,  0.00000000e+00,  6.31801564e-03,
  0.00000000e+00,  1.33242970e-01, -9.57835477e-03, 0.00000000e+00,  4.17021590e-01, -2.99781725e-02, 0.00000000e+00,  2.99985860e-01, -2.15648975e-02, 0.00000000e+00,  1.49749580e-01, -1.07649552e-02,
  8.02922630e-01,  0.00000000e+00,  2.85271104e-02, 9.43992150e-01,  0.00000000e+00,  3.35391821e-02, 1.26956584e+00,  0.00000000e+00,  4.51065190e-02, -2.01648062e+00, -0.00000000e+00, -7.16437214e-02,
  0.00000000e+00,  8.02922630e-01, -2.52335499e-01, 0.00000000e+00,  9.43992150e-01, -2.96669593e-01, 0.00000000e+00,  1.26956584e+00, -3.98988043e-01, -0.00000000e+00, -2.01648062e+00,  6.33721885e-01;

  Eigen::Matrix<double, 12, 4> Estimated_Nullspace_expected;
  Estimated_Nullspace_expected <<
  -1.38407156e-01, -3.07894110e-02,  5.20850239e-03,2.77578375e-02,
   3.36077711e-01,  2.38619805e-02, -4.90744533e-02, 5.01175069e-02,
   5.73827612e-02, -8.09094676e-01, -6.21023687e-02, 5.42771230e-01,
  -1.27109703e-01, -5.03615414e-02,  6.46058465e-02, 1.05244000e-02,
   6.28764022e-01, -3.99539092e-02, -6.43498199e-02, 2.23446518e-02,
   8.12567174e-02,  3.69819009e-01, -7.74322182e-01, 4.29639228e-01,
  -3.72586278e-02, -2.09229913e-01, -1.18312247e-01, -8.19636793e-02,
   3.44414346e-03,  7.33273811e-02,  1.91815572e-02, 6.44360894e-02,
   3.08504561e-01,  3.06798052e-01,  5.96786596e-01, 4.99938570e-01,
  -9.17678829e-02, -1.32975662e-01, -3.99923036e-02, -2.71271289e-02,
   3.05589926e-01,  2.92552956e-02, -5.39344943e-03, -1.63047687e-04,
  -4.98113486e-01,  2.02810797e-01,  1.16917810e-01, 5.05344122e-01;

  unsigned int inliers_idx_expected[] = {6, 7, 5, 9, 0, 2, 8, 3, 1, 4};

  Eigen::Matrix<double, 12, Eigen::Dynamic> Estimated_Nullspace_test;
  std::vector<unsigned int> inliers_idx_test;

  REPPnP::REPPnP_Options opt;
  opt.dim_kernel = 4;
  opt.max_algebraic_error = 0.0175;
  opt.use_chi2 = false;
  opt.chi2 = 0;
  robust_nullspace_estimation(M, opt, std::vector<double>(), Estimated_Nullspace_test, inliers_idx_test);

  for(int i=0; i<10; i++)
  {
    EXPECT_NEAR(inliers_idx_test[i],inliers_idx_expected[i], 1e-7);
  }

  EXPECT_TRUE(EIGEN_MATRIX_NEAR(Estimated_Nullspace_expected.cwiseProduct(Estimated_Nullspace_expected), Estimated_Nullspace_test.cwiseProduct(Estimated_Nullspace_test), 1e-7));
}


TEST(REPPnP, kernelPnP)
{
  Eigen::Matrix<double, 12, 4> Kernel;
  Kernel <<
  -1.38407156e-01, -3.07894110e-02,  5.20850239e-03, 2.77578375e-02,
   3.36077711e-01,  2.38619805e-02, -4.90744533e-02, 5.01175069e-02,
   5.73827612e-02, -8.09094676e-01, -6.21023687e-02, 5.42771230e-01,
  -1.27109703e-01, -5.03615414e-02,  6.46058465e-02, 1.05244000e-02,
   6.28764022e-01, -3.99539092e-02, -6.43498199e-02, 2.23446518e-02,
   8.12567174e-02,  3.69819009e-01, -7.74322182e-01, 4.29639228e-01,
  -3.72586278e-02, -2.09229913e-01, -1.18312247e-01, -8.19636793e-02,
   3.44414346e-03,  7.33273811e-02,  1.91815572e-02, 6.44360894e-02,
   3.08504561e-01,  3.06798052e-01,  5.96786596e-01, 4.99938570e-01,
  -9.17678829e-02, -1.32975662e-01, -3.99923036e-02, -2.71271289e-02,
   3.05589926e-01,  2.92552956e-02, -5.39344943e-03, -1.63047687e-04,
  -4.98113486e-01,  2.02810797e-01,  1.16917810e-01, 5.05344122e-01;

  TF tf_test = kernelPnP(c_w, Kernel,  4, 1);

  Coordinate3D_t t_expected;
  t_expected <<
  -3.06266697e-01,
  -2.86543110e-03,
   5.93010409e+00;

  RotMat_t r_expected;
  r_expected <<
  0.63205892,  0.42907426, -0.64528815,
  0.59265614,  0.26883842,  0.75926583,
  0.49925967, -0.86233473, -0.08437177;

  EXPECT_TRUE(EIGEN_MATRIX_NEAR(t_expected, tf_test.GetTranslation(), 1e-3));
  EXPECT_TRUE(EIGEN_MATRIX_NEAR(r_expected, tf_test.GetRotmatrix(), 1e-3));
}


TEST(REPPnP, REPPnP)
{
  REPPnP::REPPnP_Options opts;

  // Camera Calibration Matrix K (Intrinsics)
  REPPnP::CameraCalibration_t K;
  K<<
   11615,     0, 2592,
       0, 11615, 1728,
       0,     0,    1;

  // 3D Points in World coordinate Frame
  Eigen::Matrix<double, 3, n_matches> w_P;
  w_P<<
   79.4198, 86.4835, 145.0888, 106.7441, 96.3834, 110.2999, 109.5937, 152.5208,  88.3998, 128.7231,
  119.5197, 87.0600, 127.2223,  30.7331, 45.4528, 113.7319,  29.7686,  90.7287, 122.2597,  73.7503,
   42.5173, 73.5188, 104.3500,  43.1416, 97.9997,  35.0644,  71.3715,  35.1297, 115.2763,  48.4509;

  //Camera Extrinsics T_cw
  Coordinate3D_t t_expected;
  t_expected << 10, -20, 135;

  //Camera Extrinsics R_cw
  RotMat_t r_expected;
  r_expected <<
   0.9296, 0.1792, -0.3220,
  -0.1637, 0.9837,  0.0748,
   0.3302,-0.0168,  0.9438;

  // Matrix [R|T]
  Eigen::Matrix<double, 3, 4> T;
  T << r_expected, t_expected;

  // Project 3D Points to Image pixel coordinates (Reproduce by: K * [R, t] * w_P )
  Eigen::Matrix<double, 3, n_matches> i_P_homogeneous = K * T * w_P.colwise().homogeneous();
  REPPnP::Coordinates2D_t i_P = i_P_homogeneous.colwise().hnormalized();

  // Apply REPPnP
  std::tuple<TF, std::vector<REPPnP::idx_t>> test_result = REPPnP::REPPnP(i_P, w_P, K, opts);

  // Extract test results from tuple
  TF tf_test = std::get<0>(test_result);
  std::vector<unsigned int> inliers_idx_test = std::get<1>(test_result);

  // Testing
  EXPECT_TRUE(EIGEN_MATRIX_NEAR(r_expected, tf_test.GetRotmatrix(), 1e-2));
  EXPECT_TRUE(EIGEN_MATRIX_NEAR(t_expected, tf_test.GetTranslation(), 1e-2));
  
  // No noise in Model => expect all inliers.
  EXPECT_EQ(n_matches, inliers_idx_test.size());
}

// Unnormalized data => Bad Accuracy.
TEST(REPPnP, REPPnPBigNumbers)
{
  REPPnP::REPPnP_Options opts;

  //Camera Extrinsics R_cw
  RotMat_t r_expected;
  r_expected <<
   5.465375e-01,  2.621089e-02, 8.370243e-01,
  -5.207195e-01,  7.934265e-01, 3.151597e-01,
  -6.558566e-01, -6.081015e-01, 4.472859e-01;
  
  //Camera Extrinsics T_cw
  Coordinate3D_t t_expected;
  t_expected << 5.118738e+04, -3.149224e+05, 5.688738e+05;
  
  // Camera Calibration Matrix K_ic (Intrinsics)
  REPPnP::CameraCalibration_t K;
  K<<
  800,   0, 640,
    0, 800, 480,
    0,   0, 1;
  
  // 3D Points in World coordinate Frame w_P
  Eigen::Matrix<double, 3, n_matches> w_P;
  w_P<<
   1.811349612438364e+05, 1.811353282647416e+05, 1.811337809040453e+05, 1.811319044097754e+05, 1.811346981604795e+05, 1.811334250316463e+05, 1.811343984031515e+05, 1.811341187743768e+05, 1.811333750448374e+05, 1.811338643105565e+05,
   5.944548854290750e+05, 5.944559934898327e+05, 5.944566498259271e+05, 5.944564510593837e+05, 5.944581148585790e+05, 5.944571805285895e+05, 5.944561106649237e+05, 5.944555203347676e+05, 5.944559825804477e+05, 5.944547025033733e+05,
  -1.980409916645909e+05, -1.980403296043789e+05, -1.980403428413118e+05, -1.980393850444657e+05, -1.980421291984277e+05, -1.980426576995979e+05, -1.980423537252595e+05, -1.980403592470670e+05, -1.980414734139593e+05, -1.980418204968704e+05;

  // 2D Points in Image Coordinate Frame: i_P
  Eigen::Matrix<double, 2, n_matches> i_P;
  i_P <<
  7.149899821971745e+02, 8.565833180068146e+02, 7.067946465649388e+02, 6.645090118984123e+02, 5.079340237439254e+02, 3.249483101194119e+02, 4.738093765200874e+02, 7.209560819834210e+02, 5.333304160355814e+02, 5.310869612388115e+02,
  2.950218516500419e+02, 4.218052177285522e+02, 6.255693656638080e+02, 7.148410019743425e+02, 7.657627880589230e+02, 6.409410865983488e+02, 4.058689712982955e+02, 4.661373461066960e+02, 5.236700009328910e+02, 3.322077767736103e+02;
  
  // Apply REPPnP
  std::tuple<TF, std::vector<REPPnP::idx_t>> test_result = REPPnP::REPPnP(i_P, w_P, K, opts);
  
  // Extract test results from tuple
  TF tf_test = std::get<0>(test_result);
  std::vector<unsigned int> inliers_idx_test = std::get<1>(test_result);
  
  // Testing
  EXPECT_TRUE(EIGEN_MATRIX_NEAR(r_expected, tf_test.GetRotmatrix(), 1e-1));
  EXPECT_TRUE(EIGEN_MATRIX_NEAR(t_expected, tf_test.GetTranslation(), 1e1));
  
  // No noise in Model => expect all inliers.
  EXPECT_EQ(n_matches, inliers_idx_test.size());
}

TEST(REPPnP, Normalization)
{

  // 3D Points in World coordinate Frame w_P
  Eigen::Matrix<double, 3, 10> tmp;
  tmp<<
     1.811349612438364e+05, 1.811353282647416e+05, 1.811337809040453e+05, 1.811319044097754e+05, 1.811346981604795e+05, 1.811334250316463e+05, 1.811343984031515e+05, 1.811341187743768e+05, 1.811333750448374e+05, 1.811338643105565e+05,
     5.944548854290750e+05, 5.944559934898327e+05, 5.944566498259271e+05, 5.944564510593837e+05, 5.944581148585790e+05, 5.944571805285895e+05, 5.944561106649237e+05, 5.944555203347676e+05, 5.944559825804477e+05, 5.944547025033733e+05,
    -1.980409916645909e+05, -1.980403296043789e+05, -1.980403428413118e+05, -1.980393850444657e+05, -1.980421291984277e+05, -1.980426576995979e+05, -1.980423537252595e+05, -1.980403592470670e+05, -1.980414734139593e+05, -1.980418204968704e+05;
  Eigen::Matrix<double, 3, Eigen::Dynamic> w_P = tmp;
  Eigen::Matrix<double, 3, 1> P_expected = w_P.col(0);

  ScaledTF  T_nw = REPPnP::internal::Normalize(w_P);
  TF test(TFIdentity().GetRotmatrix(), w_P.col(0));

  TF test_result = T_nw * test;

  // Testing
  EXPECT_TRUE(EIGEN_MATRIX_NEAR(P_expected,  test_result.GetTranslation(), 1e-7));

}


int main(int argc, char **argv) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}